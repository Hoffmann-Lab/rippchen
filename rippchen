#! /usr/bin/env bash
# (c) Konstantin Riege
shopt -s extglob
trap 'die' INT TERM
#trap 'kill -PIPE 0' EXIT # kills parental processes as well - shlog conflict
#trap 'kill -PIPE -- -$$' EXIT # kill all childs - works only if $$ is process group leader
#trap 'kill -PIPE $(jobs -p)' EXIT # same as above
trap 'kill -PIPE $(pstree -p $$ | grep -Eo "\([0-9]+\)" | grep -Eo "[0-9]+") &> /dev/null' EXIT # parse pstree
# AVOID DOUBLE FORKS -> run(){cmd &}; run & -> i.e. cmd gets new process group and cannot be killed

die() {
	unset cleanup
	echo -ne "\e[0;31m"
	echo ":ERROR: $*" >&2
	echo -ne "\e[m"
	exit 1
}

cleanup() {
	if [[ $cleanup ]]; then
		for i in $(seq 0 $[${#fastq1[@]}-1]); do
			f=${fqbaseprefix[$i]}
			[[ -e $tmpdir ]] && find $tmpdir -type f -name "$f*" -exec rm -f {} \;
			if [[ -e $outdir ]]; then
				# find $outdir -type d -name "$f*" -exec rm -rf {} \;
				find $outdir -type f -name "$f*.all" -exec rm -f {} \;
				find $outdir -type f -name "$f*.sorted.bam" -exec bash -c '[[ -s {} ]] && rm -f $(dirname {})/$(basename {} .sorted.bam).bam' \;
				find $outdir -type f -name "$f*.*.gz" -exec bash -c '[[ -s {} ]] && rm -f $(dirname {})/$(basename {} .gz)' \;
			fi
		done
	fi
}

pipeline() {
	echo ":INFO: started with command: $cmd"

	source $insdir/conda/bin/activate py2
	sortmernaref=$(for i in $(ls -vdr $insdir/sortmerna-*/ | head -1)rRNA_databases/*.fasta; do echo $i,$(ls -vdr $insdir/sortmerna-*/ | head -1)index/$(basename $i .fasta)-L18; done | xargs -echo | sed 's/ /:/g')
	export C_INCLUDE_PATH=$CONDA_PREFIX/include
	export LD_LIBRARY_PATH=$CONDA_PREFIX/lib
	export JAVA_HOME=$(ls -vd $insdir/jdk*/ | tail -1)
	export MALLOC_ARENA_MAX=4
	export PATH=$(readlink -e $insdir/bin/* | xargs -echo | sed 's/ /:/g'):$PATH
	export PATH=$(readlink -e $insdir/bin/rippchen/scripts):$PATH

	source $insdir/bin/rippchen/lib/commander
	source $insdir/bin/rippchen/lib/configure
	source $insdir/bin/rippchen/lib/helper
	source $insdir/bin/rippchen/lib/preprocessing
	source $insdir/bin/rippchen/lib/pipeline

	[[ $genome ]] && {
		[[ ! -e $genome.md5s ]] && cp $insdir/bin/rippchen/lib/md5s $genome.md5s
		source $genome.md5s
		[[ $Smd5 ]] && thismd5genome=$md5genome || thismd5genome=$(md5sum $genome | cut -d ' ' -f 1)
	}

	mapper=()
	if [[ ! ${mapped[0]} ]]; then
		{	preprocessing::fastqc \
				-S ${noqual:=false} \
				-s ${Squal:=false} \
				-t $threads \
				-o $outdir/qualities/raw \
				-1 fastq1 \
				-2 fastq2
		} || return 1
		if [[ $adapter ]]; then
			${noclip:=false} || {
				{	preprocessing::cutadapt \
						-S ${noclip:=false} \
						-s ${Sclip:=false} \
						-a adapter \
						-t $threads \
						-o $outdir/clipped \
						-1 fastq1 \
						-2 fastq2 && \
					preprocessing::fastqc \
						-S ${noqual:=false} \
						-s ${Squal:=false} \
						-t $threads \
						-o $outdir/qualities/clipped \
						-1 fastq1 \
						-2 fastq2
				} || return 1
			}
		fi
		${notrim:=false} || { 
			{	preprocessing::trimmomatic \
					-S ${notrim:=false} \
					-s ${Strim:=false} \
					-t $threads \
					-m $mem \
					-o $outdir/trimmed \
					-p $tmpdir \
					-1 fastq1 \
					-2 fastq2 && \
				preprocessing::fastqc \
					-S ${noqual:=false} \
					-s ${Squal:=false} \
					-t $threads \
					-o $outdir/qualities/trimmed \
					-1 fastq1 \
					-2 fastq2
			} || return 1
		}
		${nocor:=false} || {
			{	preprocessing::rcorrector \
					-S ${nocor:=false} \
					-s ${Scor:=false} \
					-t $threads \
					-o $outdir/corrected \
					-p $tmpdir \
					-1 fastq1 \
					-2 fastq2 && \
				preprocessing::fastqc \
					-S ${noqual:=false} \
					-s ${Squal:=false} \
					-t $threads \
					-o $outdir/qualities/corrected \
					-1 fastq1 \
					-2 fastq2
			} || return 1
		}
		${norrm:=false} || {
			{	preprocessing::sortmerna \
					-S ${norrm:=false} \
					-s ${Srrm:=false} \
					-t $threads \
					-m $mem \
					-o $outdir/rrnafiltered \
					-p $tmpdir \
					-1 fastq1 \
					-2 fastq2 && \
				preprocessing::fastqc \
					-S ${noqual:=false} \
					-s ${Squal:=false} \
					-t $threads \
					-o $outdir/qualities/rrnafiltered \
					-1 fastq1 \
					-2 fastq2
			} || return 1
		}
		{	pipeline::segemehl && \
			pipeline::star
		} || return 1
	else
		custom=()
		mapper+=(custom)
		for f in "${mapped[@]}"; do
			custom+=($f)
		done
		pipeline::uniqify || return 1
	fi
    
	[[ ${#mapper[@]} -eq 0 ]] && return 0
	[[ $genome ]] && [[ ! $Smd5 ]] && sed -i "s/md5genome=.*/md5genome=$thismd5genome/" $genome.md5s

	reslice=1
	#rmdup is slice based parellelized and thus indexes bams first
	{	[[ ! $tfq1 ]] || pipeline::prepareplicates && \
		pipeline::sortsambam && \
		pipeline::removeduplicates && \
        pipeline::indexbam && \
		pipeline::mappingstats && \
		pipeline::joinmappingstats
	} || return 1

	if [[ $tfq1 ]]; then
		{	pipeline::macs && \
			pipeline::gem
		} || return 1
	fi
		
	{	pipeline::featurecounts && \
		pipeline::tpm
	} || return 1

	jointpm=1
	if [[ $comparisons ]]; then
		{	pipeline::jointpm && \
			pipeline::pca && \
			pipeline::deseq && \
			pipeline::dexseq && \
			pipeline::coexpression && \
			pipeline::goenrichment
		} || return 1
	fi

	return 0
}

[[ ! $OSTYPE =~ linux ]] && die "unsupported operating system"
bash --version | head -1 | cut -d ' ' -f 4 | cut -d '.' -f 1-2 | awk '$0<4.4{exit 1}' || die "requieres bash version 4.4 or above"
[[ ! $RIPPCHEN ]] && die "can not find installation. please do: export RIPPCHEN=/path/to/install/dir"
cmd=$(basename $0)" $*"
threads=$(grep -cF processor /proc/cpuinfo)
memory=$(grep -F -i memavailable /proc/meminfo | awk '{printf("%d",$2*0.9/1024)}')
mem=30000
[[ memthreads=$[memory/mem] -gt $threads ]] && memthreads=$threads
outdir=$PWD/results
tmpdir=$outdir
insdir=$RIPPCHEN
regex='\S+:(\d+):(\d+):(\d+)\s*.*'
accuracy=96
fragmentsize=150
insertsize=200000
dexseqnew=0
clusterfilter=0
quantifyfeature='exon'
quantifyid='gene_id'

source $insdir/bin/rippchen/lib/version
source $insdir/bin/rippchen/lib/options

options::parse "$@" || die "parameterization issue"

[[ memthreads=$[memory/mem] -gt $threads ]] && memthreads=$threads
[[ $memthreads -eq 0 ]] && die "too less memory available ($memavailable)"
[[ ! $nfq1 ]] && [[ ! $tfq1 ]] && [[ ! $nmap ]] && die "fastq file input missing - call "$(basename $0)" -h for help"
if [[ $genome ]]; then
	readlink -e $genome | file -f - | grep -qF ASCII || die "genome file does not exists or is compressed $genome"
else
	echo ":WARNING: proceeding without genome file"
	nosege=true
	nostar=true
fi
if [[ $annotation ]]; then
	readlink -e $annotation | file -f - | grep -qF ASCII || die "annotation file does not exists or is compressed $annotation"
else
	readlink -e $genome.gtf | file -f - | grep -qF ASCII && {
		annotation=$genome.gtf
	} || {
		if [[ ! $tfq1 ]]; then
			echo ":WARNING: proceeding without gtf file"
			noquant=1
		else
			[[ $comp ]] && die "annotation file needed"
		fi
	}
fi
[[ ! $tfq1 ]] && normd=true

# all idx of fastq1[.] are equal to mapper[.]
nidx=() #normal idx 
nridx=() #normal replicate idx 
tidx=() #treatment idx
ridx=() #treatment replicate idx
pidx=() #pool (2x0.5) idx 
fastq1=()
fastq2=()
mapped=()

i=-1
IFS=','
for f in $nfq1; do
	readlink -e $f &> /dev/null || die "single or first mate fastq file does not exists $f"
	fastq1[((++i))]=$f
	nidx+=($i)
done
for f in $nrfq1; do
	readlink -e $f &> /dev/null || die "single or first mate replicate fastq file does not exists $f"
	fastq1[((++i))]=$f
	nridx+=($i)
done
for f in $tfq1; do
	readlink -e $f &> /dev/null || die "single or first mate treatment fastq file does not exists $f"
	fastq1[((++i))]=$f
	[[ $rfq1 ]] && tidx+=($i) || pidx+=($i) #necessary for pooling, make pseudo-replicates respectively
done
for f in $rfq1; do
	readlink -e $f &> /dev/null  || die "single or first mate treatment replicate fastq file does not exists $f"
	fastq1[((++i))]=$f
	ridx+=($i)
done
i=-1
for f in {$nfq2,$nrfq2,$tfq2,$rfq2}; do
	readlink -e $f &> /dev/null || die "second mate fastq file does not exists $f"
	fastq2[((++i))]=$f
	[[ $comp ]] && [[ $(basename ${fastq2[$i]} | cut -d '.' -f 1) != ${fqbaseprefix[$i]} ]] && die "'.'-separated basenames do not match"
done
for f in $nmap; do
	readlink -e $f &> /dev/null || die "alignment file does not exists $f"
	mapped+=($f)
done
unset IFS

[[ ! $log ]] && log=$outdir/run.log
tmpdir=$tmpdir/rippchen_tmp
mkdir -p $(dirname $log) || die "can not create log file directory $(dirname $log)"
mkdir -p $outdir || die "can not create output directory $outdir"
mkdir -p $tmpdir || die "can not create temporary directory $tmpdir"
outdir=$(readlink -e $outdir)
tmpdir=$(readlink -e $tmpdir)

rm -f $log
touch $log
if [[ $verbose ]]; then
	pipeline 2>&1 | tee -a $log
	[[ ${PIPESTATUS[0]} -gt 0 ]] && die
else
	source $insdir/bin/rippchen/lib/progress
	progress::bar &
	progress::log $log &
	pipeline &>> $log || die
fi

echo ":INFO: success" | tee -a $log
exit 0
