#! /usr/bin/env bash
# (c) Konstantin Riege
shopt -s extglob
trap 'trapper' INT TERM
#trap 'kill -PIPE 0' EXIT # kills parental processes as well - shlog conflict
#trap 'kill -PIPE -- -$$' EXIT # kill all childs - works only if $$ is process group leader
#trap 'kill -PIPE $(jobs -p)' EXIT # same as above
trap 'kill -PIPE $(pstree -p $$ | grep -Eo "\([0-9]+\)" | grep -Eo "[0-9]+") &> /dev/null' EXIT # parse pstree
# AVOID DOUBLE FORKS -> run(){cmd &}; run & -> i.e. cmd gets new process group and cannot be killed

trapper() {
	[[ $* ]] && echo ":ERROR: $*" || echo ":ERROR: failed"
	exit 1
}

usage() {
cat << EOF
DESCRIPTION
setup the RIP peak caller pipeline RIPPCHEN

VERSION
$version

SYNOPSIS
$(basename $0) -i [all|upgrade]

OPTIONS
-i | --install [all|upgrade] : install/upgrade into exported directory: export RIPPCHEN=/path/to/install/dir
-t | --threads [value]       : threads - predicted default: $threads
-l | --log [path]            : log file - default: RIPPCHEN/install.log
-v | --verbose               : enable verbose mode
-h | --help                  : prints this message

REFERENCES
(c) Konstantin Riege
konstantin.riege{a}leibniz-fli{.}de
EOF
	exit 0
}

checkopt (){
	case $1 in
	-h | --help) usage;;
	-v | --verbose) verbose=1; return 0;;
	-t | --threads) threads=$2;;
	-l | --log) log=$2;;
	-i | --install) make=$2;;
	-*) echo ":ERROR: illegal option $1"; return 1;; 
	*) echo ":ERROR: illegal option $2"; return 1;;
	esac
	[[ ! $2 ]] && echo ":ERROR: argument missing for option $1" && return 1
	[[ $2 =~ ^- ]] && echo ":ERROR: illegal argument $2 for option $1" && return 1

	return 0
}

[[ ! $OSTYPE =~ linux ]] && trapper "unsupported operating system"
src=$(cd $(dirname $0) && echo $PWD)
threads=$(cat /proc/cpuinfo | grep -cF processor)
memory=$(grep -F -i memavailable /proc/meminfo | awk '{printf("%d",$2*0.8/1024)}')
insdir=$(readlink -e $RIPPCHEN 2> /dev/null)
make=''
verbose=''
log=''

source $src/lib/version 
[[ $# -eq 0 ]] && usage
[[ $# -eq 1 ]] && [[ ! $1 =~ ^- ]] && echo ":ERROR: illegal option $1" && trapper
for i in $(seq 1 $#); do
	if [[ ${!i} =~ ^- ]]; then
		[[ i -lt $# ]] && j=$((i+1))
		checkopt "${!i}" "${!j}" || trapper
	else 
		((++i))
	fi
done
[[ ! $insdir ]] && trapper "please do: export RIPPCHEN=/path/to/install/dir"
[[ ! $make ]] && trapper "mandatory parameter -i missing"
[[ $insdir =~ ^$src ]] && trapper "unsupported installation path $insdir. please do: export RIPPCHEN=/path/to/install/dir outside of source directory $src"
[[ ! $log ]] && log=$insdir/install.log

mkdir -p $(dirname $log) || trapper "can not create log file directory $(dirname $log)"
mkdir -p $insdir || trapper "can not create installation directory $insdir"
IFS=','
for i in $make; do
	install+=($i)
done
unset IFS

echo ":INFO: installation started. please be patient. check logs via: tail -f $log"
rm -f $log
touch $log
source $src/lib/compile
if [[ $verbose ]]; then
	for i in ${install[@]}; do
		compile::$i 2>&1 | tee -a $log
		[[ ${PIPESTATUS[0]} -gt 0 ]] && trapper
	done
else
	source $src/lib/progress
	progress::bar &
	progress::log $log &
	for i in ${install[@]}; do
		compile::$i &>> $log
		[[ $? -gt 0 ]] && trapper
	done
fi

echo ":INFO: success"
exit 0
