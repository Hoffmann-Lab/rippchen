#! /usr/bin/env bash
# (c) Konstantin Riege
compile::upgrade(){
	compile::rippchen || return 1

	return 0
}

compile::all(){
	{	compile::rippchen && \
		compile::conda && \
		compile::perlmodules && \
		compile::java && \
		compile::sortmerna && \
		compile::segemehl && \
		compile::gem && \
		compile::m6aviewer && \
		compile::metpeak && \
        compile::zerone && \
		compile::idr && \
		compile::dpgpc && \
		compile::wgcna && \
		compile::dgca && \
		compile::webgestalt
	} || return 1

	return 0
}

compile::rippchen() {
	{	echo ":INFO: installing rippchen scripts" && \
		mkdir -p $insdir/rippchen-$version && \
		cp -r $src/!(segemehl*) $insdir/rippchen-$version && \
		mkdir -p $insdir/bin && \
		ln -sfn $insdir/rippchen-$version $insdir/bin/rippchen
	} || return 1

	return 0
}

compile::conda() {
	{	echo ":INFO: installing conda and tools" && \
		mkdir -p $insdir/conda && \
		url='https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh' && \
		# url='https://repo.continuum.io/miniconda/Miniconda2-4.5.11-Linux-x86_64.sh'
		wget -q $url -O $insdir/miniconda.sh && \
		bash $insdir/miniconda.sh -b -f -p $insdir/conda && \
		rm $insdir/miniconda.sh && \
		source $insdir/conda/bin/activate && \
		# conda update -y conda - optional, better stay with the version shipped and tested in miniconda
		conda create -y -n py2 python=2; true && \
		# create special r environment which needs to be based on python2 to resolve all dependencies - especially pythoninr for webgestalt
		conda create -y -n py2r python=2; true && \
		conda create -y -n py3 python=3; true && \
		# pip install --upgrade pip - causes troubles since pip 18.x

		# readline 7 causes library version number to be lower on the shared object warnings
		# use quantstack gcc for r and perl module installation - defaults gcc has a weird usage
		# under perl 5.26 List::MoreUtils installation fails
		source activate py2 && \
		conda install -y --override-channels -c iuc -c bioconda -c main -c conda-forge -c defaults -c quantstack \
			gcc-7 libgcc-7 automake zlib ncurses xz bzip2 pigz pbzip2 ghostscript readline=6 \
			perl=5.22 perl-threaded \
			star bwa tophat \
			fastqc trimmomatic rcorrector samtools picard macs2 rseqc bedtools && \
		# package maintainers forgot this step ..
		chmod 755 $insdir/conda/envs/py2/bin/run_rcorrector.pl && \

		# python3 necessary for multithreaded cutadapt and idr
		source activate py3 && \
		# r-essentials readline - readline is now shipped with miniconda, r-essentials causes troubles with webgestalt and is not necessary anymore to be installed prior to other packages
		conda install -y --override-channels -c iuc -c bioconda -c main -c conda-forge -c defaults -c quantstack \
			gcc-7 libgcc-7 automake zlib ncurses xz bzip2 pigz pbzip2 readline=6 \
			cutadapt && \

		# split installation, otherwise solving environment takes hours!!?
		source activate py2r && \
		conda install -y --override-channels -c iuc -c bioconda -c main -c conda-forge -c defaults -c quantstack \
			gcc-7 libgcc-7 automake zlib ncurses xz bzip2 pigz pbzip2 readline=6 \
			r r-devtools && \
		# install bioconductor parallel and deseq packages and biocinstaller for metpeak
		conda install -y --override-channels -c iuc -c bioconda -c main -c conda-forge -c defaults -c quantstack \
			bioconductor-biocinstaller bioconductor-biocparallel bioconductor-genomicfeatures bioconductor-genefilter bioconductor-deseq2 bioconductor-dexseq && \
		# install r packages for custom scripts and dependencies for webgestalt (treemap) and those not automatically resolved by devtools wgcna installation
		conda install -y --override-channels -c iuc -c bioconda -c main -c conda-forge -c defaults -c quantstack \
			r-ggplot2 r-gplots r-rcolorbrewer r-svglite subread r-treemap r-wgcna && \

		conda deactivate
	} || return 1

	return 0
}

compile::java() {
	{	echo ":INFO: installing java" && \
		url=$(curl -s https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html | grep -Eo 'http[^"]+linux-x64.tar.gz') && \
		wget --no-cookies --no-check-certificate --header "Cookie: oraclelicense=accept-securebackup-cookie" $url -O $insdir/java.tar.gz && \
		tar -xzf $insdir/java.tar.gz -C $insdir && \
		rm $insdir/java.tar.gz && \
		mkdir -p $insdir/bin && \
		ln -sfn $(ls -vd $insdir/jdk*/bin/ | tail -1) $insdir/bin/java
	} || return 1

	return 0
}

compile::perlmodules() {
	{ 	echo ":INFO: installing perl modules" && \
		source $insdir/conda/bin/activate py2 && \
		url='cpanmin.us' && \
		mkdir -p $insdir/cpanm && \
		wget -q $url -O $insdir/cpanm/cpanm && \
		chmod 755 $insdir/cpanm/cpanm && \
		$insdir/cpanm/cpanm --reinstall List::MoreUtils Exporter::Tiny Try::Tiny
	} || return 1

	return 0
}

compile::sortmerna() {
	{	echo ":INFO: installing sortmerna" && \
		source $insdir/conda/bin/activate py2 && \
		url='https://github.com/biocore/sortmerna/archive/2.1.tar.gz' && \
		wget -q $url -O $insdir/sortmerna.tar.gz && \
		tar -xzf $insdir/sortmerna.tar.gz -C $insdir && \
		rm $insdir/sortmerna.tar.gz && \
		cd $(ls -dv $insdir/sortmerna-*/ | tail -1) && \
		make clean; true && \
		./configure --prefix=$PWD && \
		make -j $threads && \
		make install -i && \
		mkdir -p $insdir/bin && \
		ln -sfn $PWD/bin $insdir/bin/sortmerna
	} || return 1

	cmd=()
	for i in rRNA_databases/*.fasta; do
		o=index/$(basename $i .fasta)-L18
		cmd+=("bin/indexdb_rna --ref $i,$o -m $memory -L 18\0")
	done
	{	echo -ne ${cmd[@]} | xargs -0 -P $threads -I {} bash -c {}
	} || return 1

	return 0
}

compile::segemehl () {
	{	echo ":INFO: installing segemehl" && \
		source $insdir/conda/bin/activate py2 && \
		export C_INCLUDE_PATH=$CONDA_PREFIX/include && \
		export LD_LIBRARY_PATH=$CONDA_PREFIX/lib && \
		url='http://www.bioinf.uni-leipzig.de/Software/segemehl/downloads/segemehl-0.3.4.tar.gz' && \
		wget -q $url -O $MUVAC/segemehl.tar.gz && \
		tar -xzf $MUVAC/segemehl.tar.gz -C $MUVAC && \
		rm $MUVAC/segemehl.tar.gz && \
        cd $MUVAC/segemehl-0.3.4 && \
		make clean; true && \
		make -j $threads all && \
		mkdir -p bin && \
		mv *.x bin && \
		touch bin/segemehl bin/haarz && \
		chmod 755 bin/* && \
		mkdir -p $insdir/bin && \
		ln -sfn $PWD/bin $insdir/bin/segemehl
	} || return 1

cat << EOF > $insdir/bin/segemehl/segemehl || return 1
#!/usr/bin/env bash
[[ \$CONDA_PREFIX ]] && export PKG_CONFIG_PATH=\$CONDA_PREFIX/lib/pkgconfig
l=\$(pkg-config --variable=libdir htslib)
[[ \$l ]] && export LD_LIBRARY_PATH=\$l
\$(cd \$(dirname \$0) && echo \$PWD)/segemehl.x \$*
EOF
cat << EOF > $insdir/bin/segemehl/haarz || return 1
#!/usr/bin/env bash
[[ \$CONDA_PREFIX ]] && export PKG_CONFIG_PATH=\$CONDA_PREFIX/lib/pkgconfig
l=\$(pkg-config --variable=libdir htslib)
[[ \$l ]] && export LD_LIBRARY_PATH=\$l
\$(cd \$(dirname \$0) && echo \$PWD)/haarz.x \$*
EOF

	return 0
}

compile::javawrapper() {
cat << EOF > $1 || return 1
#!/usr/bin/env bash
set -eu -o pipefail
export LC_ALL=en_US.UTF-8

java=java
if [[ -n \$JAVA_HOME ]]; then
	if [[ -e \$JAVA_HOME/bin/java ]]; then
		java=\$JAVA_HOME/bin/java
	fi
fi

jvm_mem_opts=""
jvm_prop_opts=""
pass_args=""
for arg in \$@; do
	case \$arg in
		'-D'*) jvm_prop_opts="\$jvm_prop_opts \$arg";;
		'-XX'*) jvm_prop_opts="\$jvm_prop_opts \$arg";;
		'-Xm'*) jvm_mem_opts="\$jvm_mem_opts \$arg";;
		*) pass_args="\$pass_args \$arg";;
	esac
done
[[ ! \$jvm_mem_opts ]] && jvm_mem_opts="-Xms512m -Xmx1g"

pass_arr=(\$pass_args)
if [[ \${pass_arr[0]} == org* ]]; then
	eval \$java \$jvm_mem_opts \$jvm_prop_opts -cp $2 \$pass_args
else
	eval \$java \$jvm_mem_opts \$jvm_prop_opts -jar $2 \$pass_args
fi
exit
EOF
	chmod 755 $1 || return 1
	
	return 0
}

compile::dexseq() {
	{	echo ":INFO: installing dexseq" && \
		pip install htseq && \
		cat <(echo '#!/usr/bin/env python') $insdir/conda/envs/py2r/lib/R/library/DEXSeq/python_scripts/dexseq_prepare_annotation.py > $insdir/conda/envs/py2/bin/dexseq_prepare_annotation.py && \
		chmod 755 $insdir/conda/envs/py2/bin/dexseq_prepare_annotation.py
	} || return 1

	return 0
}

compile::gem() {
	{	echo ":INFO: installing gem" && \
		source $insdir/conda/bin/activate py2 && \
		url='https://groups.csail.mit.edu/cgs/gem/download/gem.v3.2.tar.gz' && \
		wget -q $url -O $insdir/gem.tar.gz && \
		tar -xzf $insdir/gem.tar.gz -C $insdir && \
		rm $insdir/gem.tar.gz && \
		cd $insdir/gem && \
		mkdir -p bin && \
		cp Read_Distribution_default.txt bin && \
		compile::javawrapper $PWD/bin/gem $PWD/gem.jar && \
		mkdir -p $insdir/bin && \
		ln -sfn $PWD/bin $insdir/bin/gem
	} || return 1

	return 0
}

compile::m6aviewer() {
	{	echo ":INFO: installing m6aviewer" && \
		source $insdir/conda/bin/activate py2 && \
		url='http://dna2.leeds.ac.uk/m6a/m6aViewer_1_6_1.jar' && \
		mkdir -p $insdir/m6aViewer/bin && \
		wget -q $url -O $insdir/m6aViewer/m6aViewer_1_6_1.jar && \
		cd $insdir/m6aViewer && \
		compile::javawrapper $PWD/bin/m6aViewer $PWD/m6aViewer_1_6_1.jar && \
		mkdir -p $insdir/bin && \
		ln -sfn $PWD/bin $insdir/bin/m6aViewer
	} || return 1

	return 0
}

compile::metpeak() {
	{	echo ":INFO: installing metpeak" && \
		source $insdir/conda/bin/activate py2r && \
		Rscript -e "options(unzip='$(which unzip)'); Sys.setenv(TAR='$(which tar)'); library('devtools'); install_github('compgenomics/MeTPeak', threads=$threads)"
	} || return 1

	return 0
}

compile::zerone() {
	{	echo ":INFO: installing zerone" && \
		source $insdir/conda/bin/activate py2 && \
        cd $insdir && \
        rm -rf zerone && \
		git clone https://github.com/nanakiksc/zerone.git && \
		cd zerone && \
		make clean; true && \
		make -j $threads && \
		mkdir bin && \
		mv zerone bin && \
		mkdir -p $insdir/bin && \
		ln -sfn $PWD/bin $insdir/bin/zerone
	} || return 1

	return 0
}

compile::idr() {
	{	echo ":INFO: installing idr" && \
		source $insdir/conda/bin/activate py3 && \
		url='https://github.com/kundajelab/idr/archive/2.0.4.2.tar.gz' && \
		wget -q $url -O $insdir/idr.tar.gz && \
		tar -xzf $insdir/idr.tar.gz -C $insdir && \
		rm $insdir/idr.tar.gz && \
		cd $(ls -vd $insdir/idr*/ | tail -1) && \
		pip install numpy matplotlib && \
		python setup.py install && \
		ln -sfn $PWD/bin $insdir/bin/idr
	} || return 1

	return 0
}

compile::dpgpc() {
	{	echo ":INFO: installing dp_gp_cluster" && \
		source $insdir/conda/bin/activate py2 && \
		cd $insdir && \
        rm -rf DP_GP_cluster && \
		git clone https://github.com/PrincetonUniversity/DP_GP_cluster.git && \
		cd DP_GP_cluster && \
		sed -i -r '18,19{s/^#\s*//}' bin/DP_GP_cluster.py && \
		pip install GPy pandas numpy scipy matplotlib cython sklearn && \
		python setup.py install && \
		touch bin/DP_GP_cluster && \
		chmod 755 bin/* && \
		ln -sfn $PWD/bin $insdir/bin/DP_GP_cluster
	} || return 1

cat << EOF > $insdir/bin/DP_GP_cluster/DP_GP_cluster || return 1
#!/usr/bin/env bash
export PYTHONPATH=\$CONDA_PREFIX/lib/python2.7/site-packages/:\$PYTHONPATH
\$(cd \$(dirname \$0) && echo \$PWD)/DP_GP_cluster.py \$*
EOF
	return 0
}

compile::wgcna() {
	{	echo ":INFO: installing wgcna" && \
		source $insdir/conda/bin/activate py2r && \
		Rscript -e "options(unzip='$(which unzip)'); Sys.setenv(TAR='$(which tar)'); library('devtools'); install_github('cran/WGCNA', threads=$threads)"
	} || return 1

	return 0
}

compile::dgca() {
	{	echo ":INFO: installing dgca" && \
		source $insdir/conda/bin/activate py2r && \
		Rscript -e "options(unzip='$(which unzip)'); Sys.setenv(TAR='$(which tar)'); library('devtools'); install_github('andymckenzie/DGCA', threads=$threads)"
	} || return 1

	return 0
}

compile::webgestalt() {
	{	echo ":INFO: installing webgestalt" && \
		source $insdir/conda/bin/activate py2r && \
		Rscript -e "options(unzip='$(which unzip)'); Sys.setenv(TAR='$(which tar)'); library('devtools'); install_github('cran/WebGestaltR', threads=$threads)"
	} || return 1

	return 0
}
